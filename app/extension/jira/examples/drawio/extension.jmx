<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="extension" enabled="false"/>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_create_issue" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;create_issue&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_search_jql" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;search_jql&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_view_issue" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;view_issue&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="Get every diagram in an issue" enabled="true">
            <stringProp name="ForeachController.inputVal">x_diagram_names</stringProp>
            <stringProp name="ForeachController.returnVal">x_diagram_name</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
            <stringProp name="TestPlan.comments">Use a regex extractor get the list of diagram names and store this in an array.

ForEach diagram name, call REST API.</stringProp>
          </ForeachController>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="x_diagram_names" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">x_diagram_names</stringProp>
              <stringProp name="RegexExtractor.regex">data-downloadurl=&quot;application/drawio:(.+?):</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="TestPlan.comments">Add this regular expression extrator under `400 /browse/&lt;issue_key&gt;`
 inside the  `jmeter_view_issue` transaction controller in the main `jira.jmx` file.

It extracts the name of the drawio files into an array `x_diagram_names`.
This is used by the ForEach Controller.</stringProp>
            </RegexExtractor>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_rest_get_a_diagram" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="300 /rest/drawio/1.0/diagram/crud/&lt;diagram_name&gt;/&lt;issue_key&gt;" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/rest/drawio/1.0/diagram/crud/${x_diagram_name}/${issue_key}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${scheme}://jira-magr-loadbala-hqfqiln4sx33-27270017.ap-southeast-2.elb.amazonaws.com/browse/${issue_key}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">max-age=0</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="7% of viewed issues, create a new diagram" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>7.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="issue keys " enabled="true">
              <stringProp name="filename">extension/examples/drawio/drawio-issue-keys.csv</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="variableNames">drawio_issue_key</stringProp>
              <boolProp name="randomOrder">true</boolProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="rewindOnTheEndOfList">true</boolProp>
              <boolProp name="independentListPerThread">false</boolProp>
              <stringProp name="TestPlan.comments">Using a separate list of issues to create diagrams in. This is to ensure that you don&apos;t have 
excessive number of attachments on the issues you view, and to maintains a fair baseline.
</stringProp>
            </com.blazemeter.jmeter.RandomCSVDataSetConfig>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_open_drawio_editor" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="352 /secure/editDrawioDiagram.jspa" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="issueKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">issueKey</stringProp>
                      <stringProp name="Argument.value">${drawio_issue_key}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="ui" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">ui</stringProp>
                      <stringProp name="Argument.value">atlas</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/secure/editDrawioDiagram.jspa</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${scheme}://jira-magr-loadbala-hqfqiln4sx33-27270017.ap-southeast-2.elb.amazonaws.com/browse/${issue_key}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="jmeter_save_diagram" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="533 /rest/drawio/1.0/diagram/crud/random_string/&lt;drawio_issue_key&gt;?untitledDraftName=&lt;random_title&gt;" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;filename&quot;:&quot;${random_title}&quot;,&quot;xml&quot;:&quot;&lt;mxfile modified=\&quot;${__time(yyyy-MM-dd,)}T${__time(HH:mm:ss.SSS,)}Z\&quot; host=\&quot;${application.hostname}\&quot; agent=\&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0\&quot; version=\&quot;10.7.7\&quot; etag=\&quot;b1eIimhryCWvUAlGNon5\&quot; type=\&quot;atlas\&quot;&gt;&lt;mxAtlasLibraries/&gt;&lt;diagram id=\&quot;zBi3Nc-PJJCVu6YAyz87\&quot; name=\&quot;Page-1\&quot;&gt;jZLBSsQwEIafJkehaVz1vHVVEFEoIniR0IxNIG1Kdnbb7tOb2sm2QRY8ZeabP8nMnzBRNMOjl51+cQosyzM1MHHP8pzzaxGWiYwzucv4DGpvFIkWUJoTEMyIHoyCfSJE5yyaLoWVa1uoMGHSe9ensm9n01s7WdON2QLKSlr4I/swCjVNsVmpn8DUOt7MM6o0MooJ7LVUrl8hsWOi8M7hHDVDAXYyL/oy73u4UD035qHF/2zYfh01vuKgPzfm3Z3E7fNbeUWnHKU90MDULI7RgV4bhLKT1ZT34ZWZ2GpsbMh4COkA8AjDxc74ed7wUcA1gH4MEtoQHRrTtF/85pHpldc3xCQ9cX0+eHEhBGRETBfDf2urbyt2Pw==&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;imageXml&quot;:null,&quot;imageData&quot;:&quot;iVBORw0KGgoAAAANSUhEUgAAAHkAAAA9CAYAAACJM8YzAAAAp0lEQVR4nO3RQQ3AQBDEsOFP+voriI0tBUG27el8e9xlcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJASYHmBxgcoDJAf9k3e4DU72zV6KRA5UAAAAASUVORK5CYII=&quot;,&quot;imageWidth&quot;:123,&quot;imageHeight&quot;:63,&quot;imageBackground&quot;:&quot;#ffffff&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/rest/drawio/1.0/diagram/crud/${random_title}/${drawio_issue_key}?untitledDraftName=${random_title}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${scheme}://jira-magr-loadbala-hqfqiln4sx33-27270017.ap-southeast-2.elb.amazonaws.com/secure/editDrawioDiagram.jspa?issueKey=${issue_key}&amp;ui=atlas</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:68.0) Gecko/20100101 Firefox/68.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="p_random_string" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def generator = { String alphabet, int n -&gt;
    new Random().with {
        (1..n).collect { alphabet[nextInt(alphabet.length())] }.join()
    }
}

// static
def random_title = generator((&apos;a&apos;..&apos;z&apos;).join(), 30)

// request
vars.put(&quot;random_title&quot;, random_title)

</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_view_project_summary" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;view_project_summary&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_view_dashboard" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;view_dashboard&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_edit_issue" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;edit_issue&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_add_comment" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;add_comment&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_browse_projects" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;browse_projects&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_view_kanban_board" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;view_kanban_board&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_view_scrum_board" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;view_scrum_board&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_view_backlog" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;view_backlog&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_browse_boards" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;browse_boards&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="extend_standalone_extension" enabled="false">
          <stringProp name="IfController.condition">${__groovy(&quot;${extend_action}&quot; == &quot;standalone_extension&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="/example/request/extension" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
